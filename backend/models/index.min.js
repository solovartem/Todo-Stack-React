"use strict";const config=require("../src/config/database"),Sequelize=require("sequelize"),Todo=require("../src/api/todo/Todo"),messages=require("../src/api/messages"),Api={conn:()=>new Sequelize(config),list:async res=>{const attributes={attributes:["id","description","mark"],raw:!0},list=await Todo.findAll(attributes).then(listen=>listen.map(l=>l)).catch(err=>{console.log(messages.Error.msg(err.original)),res.json(messages.Error)});return list},add:(req,res)=>{const description=req.body.description;return description?(Todo.create({description:description}).catch(err=>{console.log(messages.Error.msg(err.original)),res.json(messages.Error)}),res.json(messages.Success)):res.json(messages.Custom({erro:!0,msg:"Not exists value!"}))},delete:async(req,res)=>{const id=req.params.id,deleteTodo=await Todo.destroy({where:{id:id}}).then(e=>messages.Success).catch(err=>{console.log(messages.Error.msg(err.original)),res.json(messages.Error)});return res.send(deleteTodo)},edit:async(req,res)=>{const id=req.params.id,description=req.body.description;if(!description)return res.json(messages.Custom(!0,"Not exists value!"));const updateTodo=await Todo.update({description:description},{where:{id:id}}).then(resp=>console.log(resp)).catch(err=>err);return res.json(updateTodo)},editMark:async(req,res)=>{const id=req.params.id,atualMark=await Todo.findOne({where:{id:id},attributes:["mark","id"]}).then(mark=>mark.dataValues),dinamicMark=!atualMark.mark,query=Api.conn().query(`UPDATE todoschemas set mark = ${dinamicMark} WHERE id = ${id}`).then(result=>{}).catch(err=>res.json({error:!0,msg:err}));return res.json(query)},index:()=>"\n        API para CRUD simples feita com Sequelize/MYSQL!\n        <br>\n        <br>\n        Para listagem de dados acesse: '/list' (get)\n        <br>\n        Para adicionar: '/todo' (post)\n        <br>\n        Para edição: '/todo/:id' (put)\n        <br>\n        Para deletar: '/todo/:id' (delete)\n        <br>\n        <br>\n        GitHub: https://github.com/douglasgodoy1998\n    "};module.exports=Api;